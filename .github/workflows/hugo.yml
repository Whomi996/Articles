name: Deploy Hugo site to Pages

on:
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v0.125.7/hugo_extended_0.125.7_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install theme and setup assets
        run: |
          # 删除已存在的主题目录（如果存在）
          rm -rf themes/PaperMod
          
          # 安装主题
          git clone --depth 1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
          
          # 创建必要的目录
          mkdir -p assets/css/extended
          mkdir -p layouts/partials
          mkdir -p layouts/shortcodes
          mkdir -p layouts/_default/_markup
          mkdir -p static/fonts
          mkdir -p static/images
          mkdir -p static/js
          mkdir -p content/posts
          mkdir -p content/search
          mkdir -p content/about

          # 下载并安装思源宋体和霞鹜文楷字体
          wget -O static/fonts/SourceHanSerifCN-Regular.otf https://github.com/adobe-fonts/source-han-serif/raw/release/OTF/SimplifiedChinese/SourceHanSerifSC-Regular.otf
          wget -O static/fonts/lxgwwenkaiscreen.woff2 https://github.com/lxgw/LxgwWenKai-Lite/releases/download/v1.235/LXGWWenKaiLite-Regular.ttf
          
          # 创建自定义样式文件
          cat > assets/css/extended/custom-style.css <<EOL
          /* 自定义字体 */
          @font-face {
            font-family: "Source Han Serif CN";
            src: url("/Articles/fonts/SourceHanSerifCN-Regular.otf") format("opentype");
            font-display: swap;
          }
          
          @font-face {
            font-family: "LXGW WenKai";
            src: url("/Articles/fonts/lxgwwenkaiscreen.woff2") format("woff2");
            font-display: swap;
          }
          
          /* 全局字体设置 */
          body {
            font-family: "LXGW WenKai", "Source Han Serif CN", sans-serif;
          }
          
          .post-title {
            font-family: "Source Han Serif CN", serif;
          }
          
          :root {
            --main-width: 1200px;    /* 主容器宽度 */
            --article-width: 800px;   /* 文章内容宽度 */
            --toc-width: 300px;       /* 目录宽度 */
            --gap: 32px;              /* 间距 */
            --radius: 8px;            /* 圆角 */
            --theme: rgb(255, 255, 255);
            --entry: rgb(255, 255, 255);
            --primary: rgb(30, 30, 30);
            --secondary: rgb(108, 108, 108);
            --tertiary: rgb(214, 214, 214);
            --content: rgb(31, 31, 31);
            --code-bg: rgb(245, 245, 245);
            --border: rgb(238, 238, 238);
          }
          
          .dark {
            --theme: rgb(29, 30, 32);
            --entry: rgb(46, 46, 51);
            --primary: rgb(218, 218, 219);
            --secondary: rgb(155, 156, 157);
            --tertiary: rgb(65, 66, 68);
            --content: rgb(196, 196, 197);
            --code-bg: rgb(55, 56, 62);
            --border: rgb(51, 51, 51);
          }
          
          /* 布局容器 */
          .main {
            max-width: var(--main-width);
            margin: 0 auto;
            padding: var(--gap);
          }
          
          .page-header h1 {
            font-size: 40px;
            font-weight: 600;
          }
          
          /* 文章样式 */
          .post-single {
            position: relative;
            max-width: var(--article-width);
            margin: 0 auto;
            padding: var(--gap);
            background: var(--entry);
            border-radius: var(--radius);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
          }
          
          .post-single:hover {
            transform: translateY(-2px);
          }
          
          .post-content {
            color: var(--content);
            font-size: 1.1rem;
            line-height: 1.8;
            margin: var(--gap) 0;
          }
          
          .post-content p {
            margin: 1.5em 0;
          }
          
          /* 目录样式 */
          .toc {
            position: fixed;
            left: 0;
            top: 100px;
            width: var(--toc-width);
            max-height: calc(100vh - 150px);
            overflow-y: auto;
            padding: var(--gap);
            font-size: 0.95rem;
            background: var(--entry);
            border-radius: 0 var(--radius) var(--radius) 0;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            z-index: 100;
          }
          
          /* 目录内容样式 */
          .toc details {
            margin: 0.5rem 0;
            padding-left: 0.8rem;
            border-left: 2px solid var(--border);
            transition: all 0.3s ease;
          }
          
          .toc details:hover {
            border-left-color: var(--primary);
          }
          
          .toc summary {
            cursor: pointer;
            margin-bottom: 0.5rem;
            color: var(--secondary);
            font-weight: 500;
            transition: color 0.3s ease;
          }
          
          .toc summary:hover {
            color: var(--primary);
          }
          
          .toc li {
            list-style: none;
            padding: 0.3rem 0;
            transition: all 0.3s ease;
            position: relative;
          }

          .toc li::before {
            content: '';
            position: absolute;
            left: -0.8rem;
            top: 50%;
            width: 4px;
            height: 4px;
            background: var(--border);
            border-radius: 50%;
            transform: translateY(-50%);
            transition: all 0.3s ease;
          }

          .toc li:hover::before {
            background: var(--primary);
            transform: translateY(-50%) scale(1.2);
          }
          
          .toc li:hover {
            padding-left: 0.5rem;
          }
          
          .toc a {
            color: var(--secondary);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 0.95rem;
            line-height: 1.6;
          }
          
          .toc a:hover {
            color: var(--primary);
            text-decoration: none;
          }
          
          .toc .active {
            color: var(--primary);
            font-weight: 600;
            background: linear-gradient(90deg, var(--tertiary) 0%, transparent 100%);
            border-radius: var(--radius);
            padding: 0.2rem 0.5rem;
          }
          
          /* 主内容区域布局 */
          .post-single {
            margin-left: calc(var(--toc-width) + var(--gap));
            margin-right: 100px;
          }
          
          /* 响应式设计 */
          @media screen and (max-width: 1400px) {
            :root {
              --main-width: 95vw;
              --article-width: 100%;
              --toc-width: 250px;
            }
          }
          
          @media screen and (max-width: 768px) {
            :root {
              --gap: 16px;
            }
            
            .toc {
              display: none;
            }
            
            .post-single {
              margin-left: 0;
              margin-right: 0;
              padding: var(--gap);
            }
            
            .post-content {
              font-size: 1rem;
            }
          }
          
          /* 代码样式优化 */
          .post-content pre {
            padding: 1rem;
            margin: 1.5rem 0;
            border-radius: var(--radius);
            background: var(--code-bg) !important;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
          }
          
          .post-content pre code {
            font-family: "Fira Code", Consolas, Monaco, "LXGW WenKai", monospace;
            font-size: 0.9rem;
            line-height: 1.5;
          }
          
          .post-content code {
            padding: 0.2em 0.4em;
            margin: 0 0.2em;
            border-radius: 3px;
            font-size: 0.85em;
            background: var(--code-bg);
          }
          
          /* 图片样式优化 */
          .post-content img {
            max-width: 100%;
            height: auto;
            border-radius: var(--radius);
            margin: 1rem 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
          }
          
          .post-content img:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
          }
          
          /* 链接样式 */
          .post-content a {
            color: #0366d6;
            text-decoration: none;
            border-bottom: 1px solid transparent;
            transition: all 0.3s ease;
          }
          
          .post-content a:hover {
            border-bottom-color: currentColor;
          }
          
          /* 引用样式 */
          .post-content blockquote {
            margin: 1.5rem 0;
            padding: 0.5rem 1rem;
            border-left: 4px solid var(--primary);
            background: var(--code-bg);
            border-radius: 0 var(--radius) var(--radius) 0;
          }
          
          /* 表格样式 */
          .post-content table {
            width: 100%;
            margin: 1.5rem 0;
            border-collapse: collapse;
          }
          
          .post-content th,
          .post-content td {
            padding: 0.75rem;
            border: 1px solid var(--border);
          }
          
          .post-content th {
            background: var(--code-bg);
            font-weight: 600;
          }
          
          .post-content tr:nth-child(even) {
            background: var(--code-bg);
          }
          EOL
          
          # 创建图片处理模板
          cat > layouts/_default/_markup/render-image.html <<EOL
          <figure class="zoom-img">
            <img src="{{ .Destination | safeURL }}" alt="{{ .Text }}" data-zoomable>
            {{ if .Title }}<figcaption>{{ .Title }}</figcaption>{{ end }}
          </figure>
          EOL
          
          # 更新扩展头部
          cat > layouts/partials/extend_head.html <<EOL
          <!-- Medium Zoom -->
          <script src="https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js"></script>
          <script>
            document.addEventListener('DOMContentLoaded', () => {
              mediumZoom('[data-zoomable]', {
                margin: 24,
                background: 'rgba(0,0,0,0.8)',
                scrollOffset: 0,
              });
            });
          </script>
          
          <!-- 盘古之白 -->
          <script src="https://cdn.jsdelivr.net/npm/pangu@4.0.7/dist/browser/pangu.min.js"></script>
          <script>
            document.addEventListener('DOMContentLoaded', () => {
              pangu.spacingPage();
            });
          </script>

          <!-- 目录滚动监听 -->
          <script>
            document.addEventListener('DOMContentLoaded', () => {
              const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                  const id = entry.target.getAttribute('id');
                  const tocLink = document.querySelector(`.toc a[href="#${id}"]`);
                  
                  if (tocLink) {
                    if (entry.intersectionRatio > 0) {
                      document.querySelectorAll('.toc a').forEach(link => {
                        link.classList.remove('active');
                      });
                      tocLink.classList.add('active');
                    }
                  }
                });
              }, {
                rootMargin: '-100px 0px -66%',
                threshold: 0
              });

              // 监听所有标题元素
              document.querySelectorAll('h1[id], h2[id], h3[id], h4[id]').forEach(heading => {
                observer.observe(heading);
              });

              // 平滑滚动
              document.querySelectorAll('.toc a').forEach(link => {
                link.addEventListener('click', (e) => {
                  e.preventDefault();
                  const targetId = link.getAttribute('href').slice(1);
                  const targetElement = document.getElementById(targetId);
                  
                  if (targetElement) {
                    window.scrollTo({
                      top: targetElement.offsetTop - 100,
                      behavior: 'smooth'
                    });
                  }
                });
              });
            });
          </script>
          
          <style>
            /* 图片悬停效果 */
            [data-zoomable] {
              cursor: zoom-in;
              transition: transform 0.2s ease-in-out;
            }
            
            [data-zoomable]:hover {
              transform: scale(1.02);
            }
            
            /* 图片容器样式 */
            .zoom-img {
              margin: 2rem 0;
              text-align: center;
            }
            
            .zoom-img img {
              max-width: 100%;
              height: auto;
              border-radius: 4px;
            }
            
            .zoom-img figcaption {
              margin-top: 0.5rem;
              color: var(--secondary);
              font-size: 0.9em;
            }
          </style>
          EOL

      - name: Setup content structure
        run: |
          # 处理 Markdown 文件并下载图片
          find . -name "*.md" -not -path "./themes/*" -not -path "./archetypes/*" -not -path "./content/*" | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [ "$filename" = "README.md" ]; then
                continue
              fi
              
              dir_path=$(dirname "$file")
              category=$(basename "$dir_path")
              
              if [ "$dir_path" = "." ]; then
                target="content/posts/$filename"
                category="未分类"
              else
                target="content/posts/${category}/$filename"
                mkdir -p "content/posts/${category}"
              fi
              
              # 创建临时文件处理图片链接
              temp_file=$(mktemp)
              
              # 处理 front matter
              if ! grep -q "^---" "$file"; then
                echo "---" > "$temp_file"
                echo "title: \"$(basename "$file" .md)\"" >> "$temp_file"
                echo "date: $(git log -1 --format=%aI -- "$file")" >> "$temp_file"
                echo "draft: false" >> "$temp_file"
                echo "toc: true" >> "$temp_file"
                echo "categories: [\"$category\"]" >> "$temp_file"
                case "$category" in
                  "github")
                    echo "tags: [\"GitHub\", \"工作流\"]" >> "$temp_file"
                    ;;
                  "从0开始做增长")
                    echo "tags: [\"增长\", \"营销\", \"学习笔记\"]" >> "$temp_file"
                    ;;
                  "AI大模型实战端手课")
                    echo "tags: [\"AI\", \"大模型\", \"实战\"]" >> "$temp_file"
                    ;;
                  *)
                    echo "tags: []" >> "$temp_file"
                    ;;
                esac
                echo "---" >> "$temp_file"
              fi
              
              # 处理文件内容，下载图片并更新链接
              while IFS= read -r line; do
                if echo "$line" | grep -q '!\[.*\](http'; then
                  # 提取图片URL和替代文本
                  img_url=$(echo "$line" | sed -n 's/.*\](\([^)]*\)).*/\1/p')
                  img_alt=$(echo "$line" | sed -n 's/!\[\([^]]*\)\].*/\1/p')
                  
                  # 生成唯一的图片文件名
                  img_filename=$(echo "$img_url" | md5sum | cut -d' ' -f1)
                  img_ext=$(echo "$img_url" | sed -n 's/.*\.\([^.?]*\).*/\1/p')
                  if [ -z "$img_ext" ]; then
                    img_ext="png"
                  fi
                  
                  # 下载图片到 static/images 目录
                  mkdir -p "static/images/${category}"
                  wget -q "$img_url" -O "static/images/${category}/${img_filename}.${img_ext}" || true
                  
                  # 更新图片链接
                  echo "![${img_alt}](/Articles/images/${category}/${img_filename}.${img_ext})" >> "$temp_file"
                else
                  echo "$line" >> "$temp_file"
                fi
              done < "$file"
              
              mv "$temp_file" "$target"
            fi
          done

      - name: Create Hugo config
        run: |
          cat > config.yml <<EOL
          baseURL: 'https://whomi996.github.io/Articles/'
          languageCode: zh-cn
          title: Articles
          theme: PaperMod
          
          enableGitInfo: true
          enableRobotsTXT: true
          
          # 启用搜索功能
          outputs:
            home:
              - HTML
              - RSS
              - JSON
          
          params:
            env: production
            defaultTheme: auto
            ShowReadingTime: true
            ShowShareButtons: true
            ShowPostNavLinks: true
            ShowBreadCrumbs: true
            ShowCodeCopyButtons: true
            ShowWordCount: true
            ShowRssButtonInSectionTermList: true
            ShowLastMod: true
            ShowToc: true
            TocOpen: true
            
            homeInfoParams:
              Title: "Hi there 👋"
              Content: Welcome to my blog
              
            socialIcons:
              - name: github
                url: "https://github.com/whomi996"
                
            assets:
              disableHLJS: true
              favicon: "/favicon.ico"
              
            cover:
              responsiveImages: true
              linkFullImages: true
              
            toc:
              enabled: true
              position: "left"
              collapsible: true
              depth: 3
              
          menu:
            main:
              - identifier: archives
                name: 归档
                url: /archives/
                weight: 10
              - identifier: categories
                name: 分类
                url: /categories/
                weight: 20
              - identifier: tags
                name: 标签
                url: /tags/
                weight: 30
              - identifier: search
                name: 搜索
                url: /search/
                weight: 40
                
          markup:
            highlight:
              noClasses: false
              codeFences: true
              guessSyntax: true
              lineNos: true
              style: monokai
              
            goldmark:
              renderer:
                unsafe: true
            tableOfContents:
              endLevel: 4
              ordered: false
              startLevel: 2
          EOL

      - name: Create required pages
        run: |
          # 创建归档页面
          mkdir -p content/archives
          cat > content/archives/_index.md <<EOL
          ---
          title: "归档"
          layout: "archives"
          url: "/archives"
          summary: "archives"
          ---
          EOL
          
          # 创建搜索页面
          mkdir -p content/search
          cat > content/search/_index.md <<EOL
          ---
          title: "搜索"
          layout: "search"
          ---
          EOL
          
          # 创建分类页面
          mkdir -p content/categories
          cat > content/categories/_index.md <<EOL
          ---
          title: "分类"
          layout: "categories"
          ---
          EOL
          
          # 创建标签页面
          mkdir -p content/tags
          cat > content/tags/_index.md <<EOL
          ---
          title: "标签"
          layout: "tags"
          ---
          EOL

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: hugo --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

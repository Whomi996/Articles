name: Deploy Hugo site to Pages

on:
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.84.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Init Hugo Site
        run: |
          # 创建 Hugo 站点配置
          cat > config.toml <<EOL
          baseURL = 'https://whomi996.github.io/Articles/'
          languageCode = 'zh-cn'
          title = 'Articles'
          theme = 'meme'
          
          # MemE 主题的必要配置
          enableGitInfo = true
          defaultContentLanguage = "zh-cn"
          defaultContentLanguageInSubdir = false
          
          hasCJKLanguage = true
          
          [languages]
            [languages.zh-cn]
              languageName = "中文"
              weight = 1
          
          [params]
            version = "2.x"
            defaultTheme = "light"
            gitRepo = "https://github.com/whomi996/Articles"
            
            # 显示菜单栏
            enableMenu = true
            
            # 显示文章的目录
            enableToc = true
            
            # 显示返回顶部按钮
            enableBackToTop = true
            
          [markup.goldmark.renderer]
            unsafe = true
          EOL
          
          # 下载并设置 MemE 主题
          git clone --depth 1 https://github.com/reuixiy/hugo-theme-meme.git themes/meme
          
          # 创建内容目录结构
          mkdir -p content/posts
          mkdir -p content/about
          
          # 移动并组织 Markdown 文件
          find . -name "*.md" -not -path "./themes/*" -not -path "./archetypes/*" -not -path "./content/*" -not -path "./layouts/*" | while read file; do
            # 获取相对路径
            rel_path=${file#./}
            dir_path=$(dirname "$rel_path")
            
            # 如果不是在根目录，创建对应的内容目录
            if [ "$dir_path" != "." ]; then
              mkdir -p "content/$dir_path"
              target_path="content/$rel_path"
            else
              target_path="content/posts/$(basename "$rel_path")"
            fi
            
            # 移动文件并添加/更新前置数据
            if [ -f "$file" ]; then
              title=$(basename "$file" .md)
              date=$(git log -1 --format=%aI -- "$file")
              lastmod=$(git log -1 --format=%aI -- "$file")
              
              # 如果文件没有 front matter，添加它
              if ! grep -q "^---" "$file"; then
                temp_file=$(mktemp)
                echo "---" > "$temp_file"
                echo "title: \"$title\"" >> "$temp_file"
                echo "date: $date" >> "$temp_file"
                echo "lastmod: $lastmod" >> "$temp_file"
                echo "---" >> "$temp_file"
                cat "$file" >> "$temp_file"
                mkdir -p $(dirname "$target_path")
                mv "$temp_file" "$target_path"
              else
                mkdir -p $(dirname "$target_path")
                mv "$file" "$target_path"
              fi
            fi
          done

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

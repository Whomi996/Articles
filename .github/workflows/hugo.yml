name: Deploy Hugo site to Pages

on:
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v0.125.7/hugo_extended_0.125.7_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install theme and setup assets
        run: |
          # 删除已存在的主题目录（如果存在）
          rm -rf themes/PaperMod
          
          # 安装主题
          git clone --depth 1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
          
          # 创建必要的目录
          mkdir -p assets/css/extended
          mkdir -p layouts/partials
          mkdir -p layouts/_default/_markup
          mkdir -p static/fonts
          mkdir -p static/images
          mkdir -p content/posts
          mkdir -p content/search
          
          # 下载并安装字体（直接从GitHub仓库下载，添加重试逻辑）
          download_with_retry() {
            local url=$1
            local output=$2
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Downloading $output (Attempt $attempt of $max_attempts)"
              if wget --timeout=30 --tries=3 -O "$output" "$url"; then
                return 0
              fi
              attempt=$((attempt + 1))
              sleep 5
            done
            return 1
          }
          
          # 下载思源宋体
          if ! download_with_retry \
            "https://github.com/adobe-fonts/source-han-serif/raw/release/OTF/SimplifiedChinese/SourceHanSerifSC-Regular.otf" \
            "static/fonts/SourceHanSerifCN-Regular.otf"; then
            echo "Failed to download Source Han Serif font"
            exit 1
          fi
          
          # 下载霞鹜文楷
          if ! download_with_retry \
            "https://github.com/lxgw/LxgwWenKai-Lite/releases/download/v1.311/LXGWWenKaiLite-Regular.ttf" \
            "static/fonts/lxgwwenkaiscreen.ttf"; then
            echo "Failed to download LXGW WenKai font"
            exit 1
          fi
          
          # 创建自定义样式文件
          cat > assets/css/extended/custom-style.css <<EOL
          /* 自定义字体 */
          @font-face {
            font-family: "Source Han Serif CN";
            src: url("/Articles/fonts/SourceHanSerifCN-Regular.otf") format("opentype");
            font-display: swap;
          }
          
          @font-face {
            font-family: "LXGW WenKai";
            src: url("/Articles/fonts/lxgwwenkaiscreen.ttf") format("truetype");
            font-display: swap;
          }
          
          /* 全局字体设置 */
          body {
            font-family: system-ui, -apple-system, "LXGW WenKai", sans-serif;
          }
          
          .post-title {
            font-family: "Source Han Serif CN", serif;
          }
          
          /* 布局和主题变量 */
          :root {
            --main-width: 1200px;
            --article-width: 800px;
            --toc-width: 200px;
            --gap: 24px;
            --radius: 8px;
          }
          
          /* 响应式布局 */
          @media screen and (max-width: 1400px) {
            :root {
              --main-width: 95vw;
              --article-width: 100%;
              --toc-width: 220px;
            }
          }
          
          @media screen and (max-width: 768px) {
            :root {
              --gap: 16px;
            }
            
            .toc {
              display: none;
            }
            
            .post-single {
              margin: 0;
              padding: var(--gap);
            }
          }
          
          /* 文章内容样式 */
          .post-single {
            max-width: var(--article-width);
            margin: 0 auto;
            padding: var(--gap);
          }
          
          .post-content {
            font-size: 1.1rem;
            line-height: 1.8;
          }
          
          /* 代码块样式 */
          .post-content pre {
            padding: 1rem;
            border-radius: var(--radius);
            overflow-x: auto;
          }
          
          .post-content code {
            font-family: "Fira Code", monospace;
          }
          EOL
          
          # 创建图片处理模板
          cat > layouts/_default/_markup/render-image.html <<EOL
          <figure class="zoom-img">
            <img src="{{ .Destination | safeURL }}" alt="{{ .Text }}" loading="lazy">
            {{ with .Title }}<figcaption>{{ . }}</figcaption>{{ end }}
          </figure>
          EOL

      - name: Create Hugo config
        run: |
          cat > config.yml <<EOL
          baseURL: 'https://whomi996.github.io/Articles/'
          languageCode: zh-cn
          title: Articles
          theme: PaperMod
          
          enableGitInfo: true
          enableRobotsTXT: true
          
          paginate: 10
          
          outputs:
            home:
              - HTML
              - RSS
              - JSON
          
          params:
            env: production
            defaultTheme: auto
            ShowReadingTime: true
            ShowShareButtons: true
            ShowPostNavLinks: true
            ShowBreadCrumbs: true
            ShowCodeCopyButtons: true
            ShowWordCount: true
            ShowRssButtonInSectionTermList: true
            ShowLastMod: true
            ShowToc: true
            TocOpen: true
            
            profileMode:
              enabled: true
              title: "学习笔记 📚"
              subtitle: "记录学习过程中的思考与收获"
              imageUrl: "https://api.dicebear.com/7.x/bottts/svg?seed=felix"
              imageTitle: "Avatar"
              imageWidth: 120
              imageHeight: 120
              buttons:
                - name: 文章
                  url: "/Articles/posts"
                - name: 分类
                  url: "/Articles/categories"
                - name: 标签
                  url: "/Articles/tags"
              
            socialIcons:
              - name: github
                url: "https://github.com/whomi996"
                
            assets:
              disableHLJS: true
              favicon: "/favicon.ico"
              
            cover:
              responsiveImages: true
              linkFullImages: true
              
          menu:
            main:
              - identifier: posts
                name: 文章
                url: /posts/
                weight: 10
              - identifier: categories
                name: 分类
                url: /categories/
                weight: 20
              - identifier: tags
                name: 标签
                url: /tags/
                weight: 30
              - identifier: archives
                name: 归档
                url: /archives/
                weight: 40
              - identifier: search
                name: 搜索
                url: /search/
                weight: 50
                
          markup:
            highlight:
              noClasses: false
              codeFences: true
              guessSyntax: true
              lineNos: true
              style: monokai
              
            goldmark:
              renderer:
                unsafe: true
            tableOfContents:
              endLevel: 4
              ordered: false
              startLevel: 2
          EOL

      - name: Move content
        run: |
          # 创建临时目录
          mkdir -p temp_posts
          
          # 定义关键词和对应的标签
          declare -A keyword_tags=(
            ["GPT"]="人工智能,大语言模型"
            ["ChatGPT"]="人工智能,大语言模型"
            ["大模型"]="人工智能,大语言模型"
            ["LLM"]="人工智能,大语言模型"
            ["机器学习"]="人工智能,算法"
            ["深度学习"]="人工智能,算法"
            ["神经网络"]="人工智能,算法"
            ["人工智能"]="人工智能"
            ["增长"]="增长"
            ["营销"]="增长,营销"
            ["获客"]="增长,营销"
            ["转化"]="增长,营销"
            ["用户"]="增长,用户体验"
            ["数据"]="数据分析"
            ["分析"]="数据分析"
            ["指标"]="数据分析,运营"
            ["监控"]="数据分析,运营"
            ["技术"]="技术开发"
            ["架构"]="技术开发,系统设计"
            ["开发"]="技术开发"
            ["编程"]="技术开发"
            ["产品"]="产品设计"
            ["设计"]="产品设计,用户体验"
            ["体验"]="产品设计,用户体验"
            ["运营"]="运营推广"
            ["推广"]="运营推广,营销"
            ["渠道"]="运营推广,营销"
          )
          
          # 移动并处理文章
          process_articles() {
            local src_dir=$1
            if [ -d "$src_dir" ]; then
              for file in "$src_dir"/*; do
                if [ -f "$file" ]; then
                  # 提取文件名（不包含扩展名）
                  filename=$(basename "$file")
                  name="${filename%.*}"
                  
                  # 读取文章内容并提取front matter信息
                  original_title=""
                  original_date=""
                  original_categories=""
                  original_tags=""
                  original_draft=""
                  original_description=""
                  original_summary=""
                  content=""
                  in_front_matter=false
                  while IFS= read -r line; do
                    if [[ "$line" == "---" ]]; then
                      if [ "$in_front_matter" = true ]; then
                        in_front_matter=false
                        continue
                      else
                        in_front_matter=true
                        continue
                      fi
                    fi
                    
                    if [ "$in_front_matter" = true ]; then
                      if [[ "$line" =~ ^title:\ *(.*) ]]; then
                        original_title="${BASH_REMATCH[1]}"
                        # 移除引号
                        original_title="${original_title#\"}"
                        original_title="${original_title%\"}"
                      elif [[ "$line" =~ ^date:\ *(.*) ]]; then
                        original_date="${BASH_REMATCH[1]}"
                      elif [[ "$line" =~ ^categories:\ *(.*) ]]; then
                        original_categories="${BASH_REMATCH[1]}"
                      elif [[ "$line" =~ ^tags:\ *(.*) ]]; then
                        original_tags="${BASH_REMATCH[1]}"
                      elif [[ "$line" =~ ^draft:\ *(.*) ]]; then
                        original_draft="${BASH_REMATCH[1]}"
                      elif [[ "$line" =~ ^description:\ *(.*) ]]; then
                        original_description="${BASH_REMATCH[1]}"
                      elif [[ "$line" =~ ^summary:\ *(.*) ]]; then
                        original_summary="${BASH_REMATCH[1]}"
                      fi
                    else
                      if [ "$in_front_matter" = false ]; then
                        # 只有当不在front matter中时才添加内容
                        content+="$line"$'\n'
                      fi
                    fi
                  done < "$file"
                  
                  # 如果没有找到原始标题，使用文件名
                  if [ -z "$original_title" ]; then
                    original_title="$name"
                  fi
                  
                  # 如果没有找到原始日期，使用当前时间
                  if [ -z "$original_date" ]; then
                    original_date="$(date -Iseconds)"
                  fi
                  
                  # 初始化标签数组
                  declare -A found_tags
                  
                  # 遍历关键词查找标签（支持多个关键词匹配）
                  for keyword in "${!keyword_tags[@]}"; do
                    # 使用不区分大小写的匹配
                    if echo "$content" | grep -qi "$keyword"; then
                      tag_value="${keyword_tags[$keyword]}"
                      # 如果是以逗号分隔的多个标签，则分别添加
                      IFS=',' read -ra tag_array <<< "$tag_value"
                      for tag in "${tag_array[@]}"; do
                        # 移除前后空格
                        tag=$(echo "$tag" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
                        found_tags["$tag"]=1
                      fi
                    fi
                  done
                  
                  # 将标签数组转换为YAML数组格式
                  tags_yaml=""
                  for tag in "${!found_tags[@]}"; do
                    tags_yaml="$tags_yaml\"$tag\", "
                  done
                  tags_yaml=${tags_yaml%, }  # 移除最后的逗号和空格
                  
                  # 如果没有找到标签，添加默认标签
                  if [ -z "$tags_yaml" ]; then
                    tags_yaml="\"其他\""
                  fi
                  
                  # 创建新的front matter
                  echo "---" > "temp_posts/${name}.md"
                  echo "title: \"${original_title}\"" >> "temp_posts/${name}.md"
                  echo "date: ${original_date}" >> "temp_posts/${name}.md"
                  echo "lastmod: $(date -Iseconds)" >> "temp_posts/${name}.md"
                  
                  # 使用原始draft状态（如果存在），否则默认为false
                  if [ -n "$original_draft" ]; then
                    echo "draft: $original_draft" >> "temp_posts/${name}.md"
                  else
                    echo "draft: false" >> "temp_posts/${name}.md"
                  fi
                  
                  # 添加description和summary（如果存在）
                  if [ -n "$original_description" ]; then
                    echo "description: $original_description" >> "temp_posts/${name}.md"
                  fi
                  if [ -n "$original_summary" ]; then
                    echo "summary: $original_summary" >> "temp_posts/${name}.md"
                  fi
                  
                  # 使用原始categories（如果存在），否则使用目录名
                  if [ -n "$original_categories" ]; then
                    echo "categories: $original_categories" >> "temp_posts/${name}.md"
                  else
                    echo "categories: [\"${src_dir##*/}\"]" >> "temp_posts/${name}.md"
                  fi
                  
                  # 使用原始tags（如果存在），否则使用自动生成的tags
                  if [ -n "$original_tags" ]; then
                    echo "tags: $original_tags" >> "temp_posts/${name}.md"
                  else
                    echo "tags: [$tags_yaml]" >> "temp_posts/${name}.md"
                  fi
                  echo "---" >> "temp_posts/${name}.md"
                  
                  # 添加文章内容（移除开头和结尾的空行）
                  echo "$content" | sed -e '/./,$!d' -e :a -e '/^\n*$/{$d;N;ba' -e '}' >> "temp_posts/${name}.md"
                fi
              done
            fi
          }
          
          # 自动处理所有文件夹
          for dir in */; do
            if [ "$dir" != "content/" ] && [ "$dir" != "themes/" ] && [ "$dir" != "static/" ] && [ "$dir" != "layouts/" ] && [ "$dir" != "assets/" ]; then
              echo "Processing directory: $dir"
              process_articles "${dir%/}"
            fi
          done
          
          # 移动处理后的文章到最终位置
          mv temp_posts/* content/posts/
          rm -rf temp_posts
          
          # 创建必要的页面
          cat > content/archives.md <<EOL
          ---
          title: "归档"
          layout: "archives"
          url: "/archives"
          summary: "archives"
          ---
          EOL
          
          cat > content/search.md <<EOL
          ---
          title: "搜索"
          layout: "search"
          ---
          EOL

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo --minify --gc

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
